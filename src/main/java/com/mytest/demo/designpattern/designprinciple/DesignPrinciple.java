package com.mytest.demo.designpattern.designprinciple;

public class DesignPrinciple {
//    1、单一职责原则 Single Responsibility Principle，简称是SRP
//       单一职责原则的定义是：应该有且仅有一个原因引起类的变更
//    2、里氏替换原则 Liskov Substitution Principle，LSP
//       第一种定义，也是最正宗的定义：如果对每一个类型为S的对象o1，都有类型为T的对象o2，使得以T定义的所有
//       程序P在所有的对象o1都代换成o2时，程序P的行为没有发生变化，那么类型S是类型T的子类型
//       第二种定义：所有引用基类的地方必须能透明地使用其子类的对象
//
//       通俗点讲，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根
//       本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必就能适应。
//       含义：1、子类必须完全实现父类的方法
//		       2、里氏替换原则
//		       3、覆盖或实现父类的方法时输入参数可以被放大（子类的输入参数类型的范围扩大，如父类是HashMap，子类是Map
//		       4、覆写或实现父类的方法时输出结果可以被缩小
//    3、依赖倒置原则 Dependence Inversion Principle， DIP（面向接口编程——OOD（Object-Oriented Design
//       定义：
//       *高层模块不应该依赖低层模块，两者都应该依赖其抽象；（模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的
//	     *抽象不应该依赖细节；（接口或抽象类不依赖于实现类；
//       *细节应该依赖抽象。（实现类依赖接口或抽象类
//
//    4、接口隔离原则
//	     *客户端不应该依赖它不需要的接口
//	     *类间的依赖关系应该建立在最小的接口上
//
//    5、迪米特法则 Law of Demeter，LoD）也称为最少知识原则（Least Knowledge Principle，LKP）
//       一个对象应该对其他对象有最少的了解。
//       通俗地讲，一个类应该对自己需要耦合或调用的类知道得最少
//    6、开闭原则
//       对扩展开放，对修改关闭
}
